/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ai.deepcode.javaclient;

import ai.deepcode.javaclient.requests.FileContentRequest;
import ai.deepcode.javaclient.responses.CreateBundleResponse;
import ai.deepcode.javaclient.responses.EmptyResponse;
import ai.deepcode.javaclient.responses.GetAnalysisResponse;
import ai.deepcode.javaclient.responses.LoginResponse;

import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;
import retrofit2.http.*;

import java.io.IOException;

/**
 * https://deepcode.freshdesk.com/support/solutions/articles/60000346777-sessions
 * https://deepcode.freshdesk.com/support/solutions/articles/60000357438-bundles
 */
public final class DeepCodeRestApi {

//  private static final Logger LOGGER = LoggerFactory.getLogger(DeepCodeRestApi.class);

  private DeepCodeRestApi() {}

  private static String API_URL = "https://www.deepcode.ai/publicapi/";

  // Create simple REST adapter which points the API_URL.
  private static final Retrofit retrofit =
      new Retrofit.Builder()
          .baseUrl(API_URL)
          .addConverterFactory(GsonConverterFactory.create())
          .build();

  private interface LoginCall {
    @retrofit2.http.Headers("Content-Type: application/json")
    @POST("login")
    Call<LoginResponse> doNewLogin();
  }

  /**
   * Requests the creation of a new login session.
   *
   * @return {@link LoginResponse} instance or null if not succeed
   * @throws IOException see {@link Call#execute()}
   */
  public static LoginResponse newLogin() throws IOException {
    LoginCall loginCall = retrofit.create(LoginCall.class);
    final Response<LoginResponse> retrofitResponse = loginCall.doNewLogin().execute();
    LoginResponse loginResponse = retrofitResponse.body();
    if (loginResponse != null) {
      loginResponse.setStatusCode(retrofitResponse.code());
    }
    return loginResponse;
  }

  private interface CheckSessionCall {
    @GET("session")
    Call<Void> doCheckSession(@Header("Session-Token") String token);
  }

  /**
   * Checks status of the login process.
   *
   * @return {@link EmptyResponse} instance or null if not succeed
   * @throws IOException see {@link Call#execute()}
   */
  public static EmptyResponse checkSession(String token) throws IOException {
    CheckSessionCall checkSessionCall = retrofit.create(CheckSessionCall.class);
    final EmptyResponse result = new EmptyResponse();
    final Response<Void> retrofitResponse = checkSessionCall.doCheckSession(token).execute();
    result.setStatusCode(retrofitResponse.code());
    /*    String text;
        switch (status) {
          case 200:
            text = "The login process was successful";
            break;
          case 304:
            text = "The login process has not been completed yet";
            break;
          case 401:
            text = "Missing or invalid sessionToken";
            break;
          default:
            text = "Unknown Status Code: " + status;
            LOGGER.error(text);
            break;
        }
    */
    return result;
  }

  private interface CreateBundleCall {
    @retrofit2.http.Headers("Content-Type: application/json")
    @POST("bundle")
    Call<CreateBundleResponse> doCreateBundle(
        @Header("Session-Token") String token, @Body FileContentRequest files);
  }

  /**
   * Creates a new bundle.
   *
   * @return {@link CreateBundleResponse} instance or null if not succeed
   * @throws IOException see {@link Call#execute()}
   */
  public static CreateBundleResponse createBundle(String token, FileContentRequest files)
      throws IOException {
    CreateBundleCall createBundleCall = retrofit.create(CreateBundleCall.class);
    Response<CreateBundleResponse> retrofitResponse =
        createBundleCall.doCreateBundle(token, files).execute();
    final CreateBundleResponse createBundleResponse = retrofitResponse.body();
    if (createBundleResponse != null) {
      createBundleResponse.setStatusCode(retrofitResponse.code());
    } else {
      return new CreateBundleResponse(retrofitResponse.code());
    }
    return createBundleResponse;
  }

  private interface GetAnalysisCall {
    //    @retrofit2.http.Headers("Content-Type: application/json")
    @GET("analysis/{bundleId}")
    Call<GetAnalysisResponse> doGetAnalysis(
        @Header("Session-Token") String token,
        @Path(value = "bundleId", encoded = true) String bundleId);
  }

  /**
   * Starts a new bundle analysis or checks its current status and available results.
   *
   * @return {@link GetAnalysisResponse} instance or null if not succeed
   * @throws IOException see {@link Call#execute()}
   */
  public static GetAnalysisResponse getAnalysis(String token, String bundleId) throws IOException {
    GetAnalysisCall getAnalysisCall = retrofit.create(GetAnalysisCall.class);
    Response<GetAnalysisResponse> retrofitResponse =
        getAnalysisCall.doGetAnalysis(token, bundleId).execute();
    final GetAnalysisResponse getAnalysisResponse = retrofitResponse.body();
    if (getAnalysisResponse != null) {
      getAnalysisResponse.setStatusCode(retrofitResponse.code());
    }
    return getAnalysisResponse;
  }
}
