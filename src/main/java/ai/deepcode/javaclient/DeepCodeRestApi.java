/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ai.deepcode.javaclient;

import ai.deepcode.javaclient.requests.FileContentRequest;
import ai.deepcode.javaclient.responses.CreateBundleResponse;
import ai.deepcode.javaclient.responses.LoginResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.POST;

import java.io.IOException;

/**
 * https://deepcode.freshdesk.com/support/solutions/articles/60000346777-sessions
 * https://deepcode.freshdesk.com/support/solutions/articles/60000357438-bundles
 */
public final class DeepCodeRestApi {

  private static final Logger LOGGER = LoggerFactory.getLogger(DeepCodeRestApi.class);

  private DeepCodeRestApi() {}

  private static String API_URL = "https://www.deepcode.ai/publicapi/";

  // Create simple REST adapter which points the API_URL.
  private static final Retrofit retrofit =
      new Retrofit.Builder()
          .baseUrl(API_URL)
          .addConverterFactory(GsonConverterFactory.create())
          .build();

  private interface LoginCall {
    @retrofit2.http.Headers("Content-Type: application/json")
    @POST("login")
    Call<LoginResponse> doNewLogin();
  }

  /** Requests the creation of a new login session. */
  // todo: Status Code checks, error handling
  public static LoginResponse newLogin() {
    LoginCall loginCall = retrofit.create(LoginCall.class);
    LoginResponse loginResponse = null;
    try {
      loginResponse = loginCall.doNewLogin().execute().body();
    } catch (IOException e) {
      final String msg = "Error while requesting new login: ";
      LOGGER.error(msg, e);
      throw new RuntimeException(msg, e);
    }
    return loginResponse;
  }

  private interface CheckSessionCall {
    @GET("session")
    Call<Void> doCheckSession(@Header("Session-Token") String token);
  }

  /**
   * Checks status of the login process.
   *
   * @return Status Code
   */
  // todo: error handling
  public static int checkSession(String token) {
    CheckSessionCall checkSessionCall = retrofit.create(CheckSessionCall.class);
    int statusCode = 0;
    try {
      statusCode = checkSessionCall.doCheckSession(token).execute().code();
    } catch (IOException e) {
      final String msg = "Error while checking login session status: ";
      LOGGER.error(msg, e);
      throw new RuntimeException(msg, e);
    }
    /*    String text;
        switch (status) {
          case 200:
            text = "The login process was successful";
            break;
          case 304:
            text = "The login process has not been completed yet";
            break;
          case 401:
            text = "Missing or invalid sessionToken";
            break;
          default:
            text = "Unknown Status Code: " + status;
            LOGGER.error(text);
            break;
        }
    */
    return statusCode;
  }

  private interface CreateBundleCall {
    @retrofit2.http.Headers("Content-Type: application/json")
    @POST("bundle")
    Call<CreateBundleResponse> doCreateBundle(
        @Header("Session-Token") String token, @Body FileContentRequest files);
  }

  /**
   * Creates a new bundle.
   *
   * @return CreateBundleResponse with bundleId or throw Exception if not succeed.
   */
  // todo: error handling
  public static CreateBundleResponse createBundle(String token, FileContentRequest files) {
    CreateBundleCall createBundleCall = retrofit.create(CreateBundleCall.class);
    try {
      Response<CreateBundleResponse> response = createBundleCall.doCreateBundle(token, files).execute();
      if (response.code() != 200)
        throw new IOException("Returned status code = " + response.code());
      return response.body();
    } catch (IOException e) {
      final String msg = "Error while creating a new bundle: ";
      LOGGER.error(msg, e);
      throw new RuntimeException(msg, e);
    }
  }
}
