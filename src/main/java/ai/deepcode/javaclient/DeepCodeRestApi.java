/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ai.deepcode.javaclient;

import ai.deepcode.javaclient.requests.FileContentRequest;
import ai.deepcode.javaclient.responses.CreateBundleResponse;
import ai.deepcode.javaclient.responses.EmptyResponse;
import ai.deepcode.javaclient.responses.GetAnalysisResponse;
import ai.deepcode.javaclient.responses.LoginResponse;

import org.jetbrains.annotations.NotNull;
import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;
import retrofit2.http.*;

import java.io.IOException;

/**
 * https://deepcode.freshdesk.com/support/solutions/articles/60000346777-sessions
 * https://deepcode.freshdesk.com/support/solutions/articles/60000357438-bundles
 */
public final class DeepCodeRestApi {

  //  private static final Logger LOGGER = LoggerFactory.getLogger(DeepCodeRestApi.class);

  private DeepCodeRestApi() {}

  private static String API_URL = "https://www.deepcode.ai/publicapi/";

  // Create simple REST adapter which points the API_URL.
  private static final Retrofit retrofit =
      new Retrofit.Builder()
          .baseUrl(API_URL)
          .addConverterFactory(GsonConverterFactory.create())
          .build();

  private interface LoginCall {
    @retrofit2.http.Headers("Content-Type: application/json")
    @POST("login")
    Call<LoginResponse> doNewLogin();
  }

  /**
   * Requests the creation of a new login session.
   *
   * @return {@link LoginResponse} instance
   */
  @NotNull
  public static LoginResponse newLogin() {
    final LoginCall loginCall = retrofit.create(LoginCall.class);
    try {
      final Response<LoginResponse> retrofitResponse = loginCall.doNewLogin().execute();
      LoginResponse result = retrofitResponse.body();
      if (result == null) return new LoginResponse();
      result.setStatusCode(retrofitResponse.code());
      switch (retrofitResponse.code()) {
        case 200:
          result.setStatusDescription("The new login request was successful");
          break;
        default:
          result.setStatusDescription("Unknown Status Code: " + retrofitResponse.code());
          break;
      }
      return result;
    } catch (IOException e) {
      return new LoginResponse();
    }
  }

  private interface CheckSessionCall {
    @GET("session")
    Call<Void> doCheckSession(@Header("Session-Token") String token);
  }

  /**
   * Checks status of the login process.
   *
   * @return {@link EmptyResponse} instance
   */
  @NotNull
  public static EmptyResponse checkSession(String token) {
    CheckSessionCall checkSessionCall = retrofit.create(CheckSessionCall.class);
    final EmptyResponse result = new EmptyResponse();
    final Response<Void> retrofitResponse;
    try {
      retrofitResponse = checkSessionCall.doCheckSession(token).execute();
    } catch (IOException e) {
      return result;
    }
    result.setStatusCode(retrofitResponse.code());
    switch (retrofitResponse.code()) {
      case 200:
        result.setStatusDescription("The login process was successful");
        break;
      case 304:
        result.setStatusDescription("The login process has not been completed yet");
        break;
      case 401:
        result.setStatusDescription("Missing or invalid sessionToken");
        break;
      default:
        result.setStatusDescription("Unknown Status Code: " + retrofitResponse.code());
        break;
    }
    return result;
  }

  private interface CreateBundleCall {
    @retrofit2.http.Headers("Content-Type: application/json")
    @POST("bundle")
    Call<CreateBundleResponse> doCreateBundle(
        @Header("Session-Token") String token, @Body FileContentRequest files);
  }

  /**
   * Creates a new bundle.
   *
   * @return {@link CreateBundleResponse} instance
   */
  @NotNull
  public static CreateBundleResponse createBundle(String token, FileContentRequest files) {
    CreateBundleCall createBundleCall = retrofit.create(CreateBundleCall.class);
    Response<CreateBundleResponse> retrofitResponse = null;
    try {
      retrofitResponse = createBundleCall.doCreateBundle(token, files).execute();
    } catch (IOException e) {
      return new CreateBundleResponse();
    }
    CreateBundleResponse result = retrofitResponse.body();
    if (result == null) {
      result = new CreateBundleResponse();
    }
    result.setStatusCode(retrofitResponse.code());
    switch (retrofitResponse.code()) {
      case 200:
        result.setStatusDescription("The bundle creation was successful");
        break;
      case 400:
        result.setStatusDescription("Request content doesn't match the specifications");
        break;
      case 401:
        result.setStatusDescription("Missing sessionToken or incomplete login process");
        break;
      case 403:
        result.setStatusDescription("Unauthorized access to requested repository");
        break;
      case 404:
        result.setStatusDescription("Unable to resolve requested oid");
        break;
      default:
        result.setStatusDescription("Unknown Status Code: " + retrofitResponse.code());
        break;
    }
    return result;
  }

  private interface GetAnalysisCall {
    //    @retrofit2.http.Headers("Content-Type: application/json")
    @GET("analysis/{bundleId}")
    Call<GetAnalysisResponse> doGetAnalysis(
        @Header("Session-Token") String token,
        @Path(value = "bundleId", encoded = true) String bundleId);
  }

  /**
   * Starts a new bundle analysis or checks its current status and available results.
   *
   * @return {@link GetAnalysisResponse} instance}
   */
  @NotNull
  public static GetAnalysisResponse getAnalysis(String token, String bundleId) {
    GetAnalysisCall getAnalysisCall = retrofit.create(GetAnalysisCall.class);
    try {
      Response<GetAnalysisResponse> retrofitResponse =
          getAnalysisCall.doGetAnalysis(token, bundleId).execute();
      GetAnalysisResponse result = retrofitResponse.body();
      if (result == null) result = new GetAnalysisResponse();
      result.setStatusCode(retrofitResponse.code());
      switch (retrofitResponse.code()) {
        case 200:
          result.setStatusDescription("The analysis request was successful");
          break;
        case 401:
          result.setStatusDescription("Missing sessionToken or incomplete login process");
          break;
        case 403:
          result.setStatusDescription("Unauthorized access to requested repository");
          break;
        default:
          result.setStatusDescription("Unknown Status Code: " + retrofitResponse.code());
          break;
      }
      return result;
    } catch (IOException e) {
      return new GetAnalysisResponse();
    }
  }
}
